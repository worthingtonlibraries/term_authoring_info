<?php

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\term_authoring_info\Controller\TermAuthoringInfoManageFields;
use Drupal\term_authoring_info\Controller\TermAuthoringInfoManageGroups;
use Symfony\Component\HttpFoundation\Request;
use Drupal\Core\Url;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add 'Store authoring information' field to the vocabulary 'Edit' screen.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   An associative array containing the current state of the form.
 * @param string
 *   ID of the form.
 */
function term_authoring_info_form_taxonomy_vocabulary_form_alter(&$form, &$form_state, $form_id) {

  // Retrieve the vocab ID.
  $vid = $form['vid']['#default_value'];

  // Set the referring URL as a variable.
  $url_previous = \Drupal::request()->server->get('HTTP_REFERER');

  // Get the path to this module's main config page.
  $url_term_authoring_config = Url::fromRoute('term_authoring_info.settings')->toString();

  $term_authoring_info_redirect = NULL;

  // Determine if the user just linked over
  // from this module's main config page.
  if (strpos($url_previous, $url_term_authoring_config) !== FALSE) {
    $term_authoring_info_redirect = 'term_authoring_info.settings';
  }

  // #default_value is always populated except when
  // the vocabulary is first created; then use #value.
  if ((empty($form['vid']['#default_value'])) && (!empty($form['vid']['#value']))) { 
    $vid = $form['vid']['#value'];
  }

  $entities = \Drupal::entityTypeManager()->getStorage('vocab_display_status')->loadMultiple();
  // Set the checkbox state for this vocabulary.
  $checkbox_value = ((!empty($entities[$vid])) ? $entities[$vid]->get('state') : 0);

  //Create the 'Store authoring information' field.
  $form['term_authoring_info'] = [
    '#type' => 'checkbox',
    '#title' => t('Store authoring information'),
    '#default_value' => $checkbox_value,
    '#description' => t('Author username and publish date will be stored in the database and available for display.'),
    '#weight' => 1,
  ];

  // If the user should redirect back to this module's
  // main config page, store the appropriate route.
  $form['term_authoring_info_redirect'] = [
    '#type' => 'hidden',
    '#default_value' => $term_authoring_info_redirect,
  ];

  // Add a submit handler for the 'Store authoring information' field.
  $form['actions']['submit']['#submit'][] = 'term_authoring_info_taxonomy_vocabulary_form_submit';

}


/**
 * Submit handler the 'Store authoring information' field.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   An associative array containing the current state of the form.
 */
function term_authoring_info_taxonomy_vocabulary_form_submit($form, &$form_state) {

  // Retrieve the vocab ID.
  $vid = $form['vid']['#default_value'];
  $checkbox_original = NULL;

  // #default_value is always populated except when
  // the vocabulary is first created; then use #value.
  if ((empty($form['vid']['#default_value'])) && (!empty($form['vid']['#value']))) { 
    $vid = $form['vid']['#value'];
  }

  // Retrieve the Drupal route that page
  // should redirect to (if applicable).
  $term_authoring_info_redirect = $form_state->getValue('term_authoring_info_redirect');

  // Set the checkbox state as a variable.
  $checkbox = $form_state->getValue('term_authoring_info');

  // Attempt to load the entity configuration value for this vocabulary.
  $entity = \Drupal::entityTypeManager()->getStorage('vocab_display_status')->load($vid);

  // Determine if an entity configuration value
  // for this vocabulary doesn't exist yet.
  if (empty($entity)) {
    // Create a new entity configuration value.
    $entity = \Drupal::entityManager()->getStorage('vocab_display_status')->create();
  }
  else {
    $checkbox_original = $entity->state;
  }

  if ($checkbox != $checkbox_original) {

    $vocab = \Drupal\taxonomy\Entity\Vocabulary::load($vid);
    $vocab_name = ((!empty($vocab)) ? $vocab->label() : NULL);

    // Determine if 'Authoring Information' fields should be created.
    if ($checkbox == 1) {

      // Create the 'Authoring Information' fields.
      TermAuthoringInfoManageFields::createFields($vid);

      // Create the 'Authoring Information' field group.
      TermAuthoringInfoManageGroups::createGroup($vid);

      $message = t('Authoring information has been added to the %vocab_name vocabulary.',
        ['%vocab_name' => $vocab_name]
      );
      \Drupal::messenger()->addMessage($message);

    }
    // Otherwise, 'Authoring Information' fields should be deleted.
    else {
      $term_authoring_info_redirect = 'term_authoring_info.delete.interstitial';
      $checkbox = 1;
    }

    // Update the entity with the new values.
    $entity->id = $vid;
    $entity->state = $checkbox;

    // Save the changes. 
    $entity->save();

  }

  // Determine if this form should redirect back
  // to this module's main configuration screen.
  if (!empty($term_authoring_info_redirect)) {
    $form_state->setRedirect($term_authoring_info_redirect);
  }

}

/**
 * Implements hook_form_alter().
 *
 * Add a custom submit handler if a vocabulary includes Authoring Information.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   An associative array containing the current state of the form.
 * @param string
 *   ID of the form.
 */
function term_authoring_info_form_alter(&$form, &$form_state, $form_id) {

  // Ensure that this is a taxonomy term form.
  if (strpos($form_id, 'taxonomy_term') !== FALSE) {

    $vid = $form['vid']['#value'];

    // Attempt to load the author info entity configuration for this vocabulary.
    $entity = \Drupal::entityTypeManager()->getStorage('vocab_display_status')->load($vid);

    // Ensure authoring info for this vocabulary should be displayed.
    if ((!empty($entity)) && ($entity->state == 1)) {
      // Set the custom submit handler as the first one to be processed.
      array_unshift($form['actions']['submit']['#submit'], 'term_authoring_info_populate_empty_fields');
    }
  }

}

/**
 * Submit handler for populating any blank 'Author Information' fields.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   An associative array containing the current state of the form.
 */
function term_authoring_info_populate_empty_fields($form, &$form_state) {

  // Determine if the 'Authored by' field is empty.
  if (empty($form_state->getValue('field_term_authoring_info_uid')[0]['target_id'])) {
    $userCurrent = \Drupal::currentUser();

    // Set the current logged-in user as the author.
    $form_state->getValue('field_term_authoring_info_uid')[0]['target_id'] = $userCurrent->id();
  }

  // Determine if the 'Authored on' field is empty.
  if (empty($form_state->getValue('field_term_authoring_datecreated')[0]['value'])) {
    // Set the current timestamp as the created date.
    $form_state->getValue('field_term_authoring_datecreated')[0]['value'] = DrupalDateTime::createFromTimestamp(time());
  }

}
